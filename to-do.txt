Vision: lower the barriers to entry and enable more sophisticated testing

Items
*	(separate VM for the runners)
*  use 1.5 features
		use varargs
		compatibility with the assert keyword
*   support testing run once initialization code e.g. class Foo {{...}}
*	deprecate test suites
		need a way to describe collections of tests
*	compatbility with 3.8
		need a compatibility test suite
		add an ant compatbility
*	enable tighther and more flexible IDE integration
		enable test reordering/prioritization
			run failures first (<- this seems like it is up to the runner)
*  get 100% coverage
* 	logging support (runner listeners should handle this?)
*     we should look into a test execution model which doesn't recquire
      that all test objects are instantiated during the test run.
      This might come hand in handy when revisiting the
      test suites
* update documentation
  * get rid of excluded.properties
* be able to specify the order of tests (ewwww....)
* test categorization & filtering (<- seems like a runner issue)
* inherited befores and afters
* Change the package name to org.junit?
* forward compatibility test case (subclass of TestCase that runs new-style tests, for use with old runners?)
* TestFailure and all its cousins (mis-classified @Test method, unexpected exception, ...)
* replace old decorators with annotations
  - run count
  - active
  - timeout

Done
* test listening (test run listener)
* annotation support
		no need to inherit from test case
			annotating test
			annotating setup/teardown
			annotating expected exceptions
* use 1.5 features
		use enhanced for
* dump the graphical runners
* get rid of failures and errors distinction



