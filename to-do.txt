Theme: lower the barriers to entry and enable more sophisticated testing

Before first public candidate release:
!*  warn when an annotated test method isn't public (check for Before, After, BeforeClass, AfterClass and Test)
!* update documentation
  * get rid of excluded.properties
!* inherited befores and afters and tests (be careful to not run overridden methods)
!* TestFailure
!* subpackages for org.junit
!* can we make the JUnit4TestCaseAdapter transparent to old runners so that they show the real class

Before final JUnit 4 release:
*   support testing run once initialization code e.g. class Foo {{...}}
*	deprecate test suites
		need a way to describe collections of tests
*	compatibility with 3.8
		need a compatibility test suite
		migration tool TestCase subclass in, JUnit 4 format out
		add an ant compatbility
		
*	enable tighther and more flexible IDE integration
	* be able to specify the order of tests (ewwww....)
		enable test reordering/prioritization
			run failures first (<- this seems like it is up to the runner)
		make sure TestListener is symmetric and meets needs of all runner developers
*  	get 100% coverage
* 	logging support (runner listeners should handle this?) (Log4JListener , 1.4 logging support (java.util.Logging)))
*   Runner.run(Object)
* test categorization & filtering (<- seems like a runner issue) @Category(short, integration)  @Test(category=windowsOnly)
* timeout annotation
* command line interface
* TestRunEvent
* think about compatibility with old runners--no clashing class names
* assertEquals for collections (show at which elements the collections differ)
* junit test file converter: convert testFoo() to @Test foo()
     Suites?
     Decorators?


Done
* Change the package name to org.junit?
* test listening (test run listener)
* annotation support
		no need to inherit from test case
			annotating test
			annotating setup/teardown
			annotating expected exceptions
* use 1.5 features
		compatibility with the assert keyword
		use enhanced for
* dump the graphical runners
* get rid of failures and errors distinction



